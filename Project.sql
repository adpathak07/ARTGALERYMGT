/*************************************************    User Creation and Grants   ************************************************  */


BEGIN
    EXECUTE IMMEDIATE 'DROP USER Gallry_Admin CASCADE';
    DBMS_OUTPUT.PUT_LINE('User dropped successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END drop_user_proc;
/

create user Gallry_Admin identified by Artgallerymgt123#;
GRANT CONNECT,RESOURCE,CREATE VIEW,CREATE TRIGGER TO Gallry_Admin;
ALTER USER Gallry_Admin quota 100M on Users;






/******************************************    Creating Tables, Procedures and Inserting Records  *********************************/


-- ANONYMOUS PROCEDUREE BLOCK TO DROP TABLES IF THEY EXIST
DECLARE
    table_exists EXCEPTION;
    PRAGMA EXCEPTION_INIT(table_exists, -942);

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_DIRECTORY';
    EXECUTE IMMEDIATE 'DROP TABLE ORDERS';
    EXECUTE IMMEDIATE 'DROP TABLE ARTWORK';
    EXECUTE IMMEDIATE 'DROP TABLE ARTIST';
    EXECUTE IMMEDIATE 'DROP TABLE EXHIBITION';
    EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER';
    EXECUTE IMMEDIATE 'DROP TABLE GALLERY';
EXCEPTION
    WHEN table_exists THEN
        NULL;
END;
/





-- CUSTOMER_DIRECTORY

CREATE TABLE CUSTOMER_DIRECTORY(
     CUSTID VARCHAR(100) PRIMARY KEY,
     FNAME VARCHAR(100),
     LNAME VARCHAR(100),
     DOB VARCHAR(100),
     ADDRESS VARCHAR(100),
     MOBILE_NO VARCHAR(100)  
 );


--PROCEDURE OF INSERT CUSTOMER_DIRECTORY
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER_DIRECTORY(PI_CUSTID VARCHAR, PI_FNAME VARCHAR,
PI_LNAME VARCHAR,PI_DOB VARCHAR,PI_ADDRESS VARCHAR,PI_MOBILE_NO VARCHAR)
AS
BEGIN
    INSERT INTO CUSTOMER_DIRECTORY VALUES(PI_CUSTID, PI_FNAME,PI_LNAME,PI_DOB,PI_ADDRESS,PI_MOBILE_NO);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_CUSTOMER_DIRECTORY;
/


--Trigger
CREATE OR REPLACE TRIGGER before_insert_customer
BEFORE INSERT ON CUSTOMER_DIRECTORY
FOR EACH ROW
BEGIN
    :NEW.DOB := TO_CHAR(:NEW.DOB, 'DD-MON-YY');
EXCEPTION 
   WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/


-- INSERT CUSTOMER_DIRECTORY
EXEC ADD_CUSTOMER_DIRECTORY('C100','MICHAEL','SCOFIELD','9-Jul-1992','SPAIN','681991239');
EXEC ADD_CUSTOMER_DIRECTORY('C101','GAURAV','KUMAR','7-Feb-1987','INDIA','9293874129');
EXEC ADD_CUSTOMER_DIRECTORY('C102','TRAVIS','HENRY','7-Feb-1993','UK','4271837391');
EXEC ADD_CUSTOMER_DIRECTORY('C103','HASAN','MINHAJ','3-Apr-1995','RIYADH','5819417482');
EXEC ADD_CUSTOMER_DIRECTORY('C104','TOM','HANKS','4-Sep-1991','RUSSIA','2148274903');
EXEC ADD_CUSTOMER_DIRECTORY('C105','ADARSH','PATHAK','6-JUL-1998','INDIA','8839255693');
EXEC ADD_CUSTOMER_DIRECTORY('C106','ABHISHEK','SINGH','5-DEC-1992','INDIA','9939245642');
EXEC ADD_CUSTOMER_DIRECTORY('C107','TOM','HOUTUM','10-Oct-1963','SPAIN','681881249');


--Table View

Select * from Customer_Directory;





-- GALLERY
 CREATE TABLE GALLERY(
  GID VARCHAR(100) PRIMARY KEY,
  GNAME VARCHAR(100),
  LOCATION VARCHAR(200)
  );


--PROCEDURE OF GALLERY TO INSERT RECORDS
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_GALLERY(PI_GID VARCHAR, PI_GNAME VARCHAR, PI_LOCATION VARCHAR)
AS
BEGIN
   INSERT INTO GALLERY VALUES(PI_GID, PI_GNAME, PI_LOCATION);
   COMMIT;
EXCEPTION 
   WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_GALLERY;
/


--Trigger
CREATE OR REPLACE TRIGGER before_gallery_insert
BEFORE INSERT
ON Gallery
FOR EACH ROW
BEGIN
    :NEW.GNAME := UPPER(:NEW.GNAME);
    :NEW.LOCATION := UPPER(:NEW.LOCATION);
END;
/


--INSERT GALLERY
EXEC ADD_GALLERY('G100','BOSTON Gallery','Downtown');
EXEC ADD_GALLERY('G101','NEWYORK Gallery','QWEENS');
EXEC ADD_GALLERY('G102','NEWYORK Gallery','MANHATTEN');
EXEC ADD_GALLERY('G103','LOSANGELES Gallery','SANTA MONICA');
EXEC ADD_GALLERY('G104','LOSANGELES Gallery','MALIBU');



--Table View

Select * from Gallery;








-- CUSTOMER
   CREATE TABLE CUSTOMER(
    CUSTID VARCHAR(10) PRIMARY KEY,
    GID VARCHAR(10),
    CONSTRAINT FK_CUSTOMER_GID FOREIGN KEY (GID) REFERENCES GALLERY(GID)
    );


--PROCEDURE OF CUSTOMER TO INSERT RECORDS  
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(PI_CUSTID VARCHAR, PI_GID VARCHAR)
AS
BEGIN
   INSERT INTO CUSTOMER VALUES(PI_CUSTID, PI_GID);
   COMMIT;
EXCEPTION 
   WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_CUSTOMER;
/


-- INSERT CUSTOMER
EXEC ADD_CUSTOMER('C100','G100');
EXEC ADD_CUSTOMER('C101','G101');
EXEC ADD_CUSTOMER('C102','G102');
EXEC ADD_CUSTOMER('C103','G103');
EXEC ADD_CUSTOMER('C104','G100');
EXEC ADD_CUSTOMER('C105','G103');
EXEC ADD_CUSTOMER('C106','G100');
EXEC ADD_CUSTOMER('C107','G102');


--Table View

Select * from Customer;








--EXHIBITION
 CREATE TABLE EXHIBITION(
    EID VARCHAR(100) PRIMARY KEY,
    GID VARCHAR(100),
    STARTDATE DATE,
    ENDDATE DATE,
    CONSTRAINT FK_GID FOREIGN KEY (GID) REFERENCES Gallery(GID)
    );


--PROCEDURE OF EXHIBITION TO INSERT RECORDS
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_EXHIBITION(PI_EID VARCHAR, PI_GID VARCHAR, PI_STARTDATE DATE, PI_ENDDATE DATE)
AS
BEGIN
   INSERT INTO EXHIBITION VALUES(PI_EID, PI_GID, PI_STARTDATE, PI_ENDDATE);
   COMMIT;
EXCEPTION 
   WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_EXHIBITION;
/


--Trigger
CREATE OR REPLACE TRIGGER UPDATE_DATES_TRIGGER
BEFORE INSERT ON EXHIBITION
FOR EACH ROW
BEGIN
    :NEW.STARTDATE := TO_DATE(:NEW.STARTDATE, 'DD-MON-YY');
    :NEW.ENDDATE := TO_DATE(:NEW.ENDDATE, 'DD-MON-YY');
END;
/




--INSERT EXHIBITION
EXEC ADD_EXHIBITION ('E100','G100','08-Nov-23','23-Nov-2023');
EXEC ADD_EXHIBITION ('E101','G101','15-Nov-23','31-Dec-2023');
EXEC ADD_EXHIBITION ('E102','G101','01-Jan-2024','24-Jan-2024');
EXEC ADD_EXHIBITION ('E103','G103','12-Oct-2023','28-Nov-2023');
EXEC ADD_EXHIBITION ('E104','G103','14-Dec-2023','27-Jan-2024');


--Table View

Select * from Exhibition;


--Function to find the number of date exhibition held
create or replace function Event_opened_for_days(pi_eid varchar) return number
AS
v_left_days number;
begin
    select enddate-startdate into v_left_days
    from Exhibition
    where eid = pi_eid;
    return v_left_days;
exception
    when no_data_found then
    return 0;
    when others then
    return -1;
end;
/
select Exhibition.*,event_opened_for_days(eid)||' Days' as No_Of_Days_Event_Is_Open from Exhibition;







-- ARTIST
   CREATE TABLE ARTIST(
    ARTIST_ID VARCHAR(10) PRIMARY KEY,
    GID VARCHAR(10),
    CUSTID VARCHAR(10),
    FNAME VARCHAR(10),
    LNAME VARCHAR(10),
    BIRTHPLACE VARCHAR(10),
    CONSTRAINT FK_ARTIST_GID FOREIGN KEY (GID) REFERENCES GALLERY(GID),
    CONSTRAINT FK_ARTIST_CUSTID FOREIGN KEY (CUSTID) REFERENCES CUSTOMER(CUSTID)
    );


--PROCEDURE OF ARTIST TO INSERT THE RECORDS
CREATE OR REPLACE PROCEDURE ADD_ARTIST(PI_ARTIST_ID VARCHAR,PI_GID VARCHAR,PI_CUSTID VARCHAR,
PI_FNAME VARCHAR,PI_LNAME VARCHAR,PI_BIRTHPLACE VARCHAR)
AS
BEGIN
    INSERT INTO ARTIST VALUES(PI_ARTIST_ID,PI_GID,PI_CUSTID,
PI_FNAME,PI_LNAME,PI_BIRTHPLACE);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ARTIST;
/


--INSERT ARTIST
EXEC ADD_ARTIST('A100','G100','C100','SAM','WILSON','NORWAY');
EXEC ADD_ARTIST('A101','G101','C101','LIONEL','SCALLONI','NORWAY');
EXEC ADD_ARTIST('A102','G101','C102','MANUEL','GREEN','AUSTRALIA');
EXEC ADD_ARTIST('A103','G101','C103','GERAD','GAVI','AUSTRALIA');
EXEC ADD_ARTIST('A104','G102','C104','ROBERT','TAYLOR','DENMARK');
EXEC ADD_ARTIST('A105','G100','C101','ROBERT','TAYLOR','DENMARK');


--Table View

Select * from Artist;








-- ARTWORK
  CREATE TABLE ARTWORK(
    ARTID VARCHAR(10) PRIMARY KEY,
    TITLE VARCHAR(100),
    YEAR_ VARCHAR(10),
    TYPE_OF_ART VARCHAR(100),
    PRICE NUMBER(10),
    EID VARCHAR(10),
    GID VARCHAR(10),
    ARTIST_ID VARCHAR(10),
    CONSTRAINT FK_ARTWORK_EID FOREIGN KEY (EID) REFERENCES EXHIBITION(EID),
    CONSTRAINT FK_ARTWORK_GID FOREIGN KEY (GID) REFERENCES GALLERY(GID),
    CONSTRAINT FK_ARTIST_ID FOREIGN KEY (ARTIST_ID) REFERENCES ARTIST(ARTIST_ID)
    );


--PROCEDURE OF ARTWORK TO INSERT THE RECORDS
CREATE OR REPLACE PROCEDURE ADD_ARTWORK(PI_ARTID VARCHAR,PI_TITLE VARCHAR,PI_YEAR_ VARCHAR,
PI_TYPE_OF_ART VARCHAR,PI_PRICE NUMBER,PI_EID VARCHAR,PI_GID VARCHAR,PI_ARTIST_ID VARCHAR)
AS
BEGIN
    INSERT INTO ARTWORK VALUES(PI_ARTID,PI_TITLE,PI_YEAR_,
PI_TYPE_OF_ART,PI_PRICE,PI_EID,PI_GID,PI_ARTIST_ID);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ARTWORK;
/
    

--INSERT ARTWORK
EXEC ADD_ARTWORK('AR100','FIRE AND ICE','2009','PAINTING',2300,'E100','G100','A100');
EXEC ADD_ARTWORK('AR101','BONFIRE','2001','SCULPTURES',2700,'E101','G101','A102');
EXEC ADD_ARTWORK('AR102','DROP OF COLD','2015','VISUAL ART',1500,null,'G102','A102');
EXEC ADD_ARTWORK('AR103','DUSTY DAY','2007','POP ART',4500,'E103','G103','A103');
EXEC ADD_ARTWORK('AR104','GLIMPSE OF DAWN','2003','MODERN ART',3100,null,'G104','A104');
EXEC ADD_ARTWORK('AR105','DROP OF HOT','2013','VISUAL ART',1550,null,'G102','A104');
EXEC ADD_ARTWORK('AR106','DUSTY NIGHT','2008','POP ART',4510,'E101','G103','A101');
EXEC ADD_ARTWORK('AR107','IMAGINE OF DAWN','2003','MODERN ART',3120,null,'G104','A100');
EXEC ADD_ARTWORK('AR108','DUSK OF DAWN','2009','SCULPTURES',3200,null,'G104','A105');


--Table View

Select * from Artwork;






-- ORDERS
    CREATE TABLE ORDERS(
       ORDER_ID VARCHAR(10) PRIMARY KEY,
       ORDER_DATE VARCHAR(12),
       SHIPPED_DATE VARCHAR(12),
       SHIP_NAME VARCHAR(20),
       SHIP_ADDRESS VARCHAR(20),
       SHIP_CITY VARCHAR(10),
       SHIP_COUNTRY VARCHAR(10),
       SHIP_ZIPCODE VARCHAR(10),
       CUSTID VARCHAR(10),
       ARTID VARCHAR(10),
       CONSTRAINT FK_ORDER_CUSTID FOREIGN KEY (CUSTID) REFERENCES CUSTOMER(CUSTID),
       CONSTRAINT FK_ORDER_ARTID FOREIGN KEY (ARTID) REFERENCES ARTWORK(ARTID)
       );



--PROCEDURE OF ORDERS TO INSERT THE RECORDS
CREATE OR REPLACE PROCEDURE ADD_ORDERS(PI_ORDER_ID VARCHAR,PI_ORDER_DATE VARCHAR,PI_SHIPPED_DATE VARCHAR,
PI_SHIP_NAME VARCHAR,PI_SHIP_ADDRESS VARCHAR,PI_SHIP_CITY VARCHAR,PI_SHIP_COUNTRY VARCHAR,PI_SHIP_ZIPCODE VARCHAR,
PI_CUSTID VARCHAR,PI_ARTID VARCHAR)
AS
BEGIN
    INSERT INTO ORDERS VALUES(PI_ORDER_ID,PI_ORDER_DATE,PI_SHIPPED_DATE,
PI_SHIP_NAME,PI_SHIP_ADDRESS,PI_SHIP_CITY,PI_SHIP_COUNTRY ,PI_SHIP_ZIPCODE,
PI_CUSTID,PI_ARTID );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_ORDERS;
/


CREATE OR REPLACE TRIGGER before_insert_orders
BEFORE INSERT ON Orders
FOR EACH ROW
BEGIN
    :NEW.shipped_date := TO_DATE(:NEW.shipped_date, 'DD-MON-YY');
    :NEW.order_date := TO_DATE(:NEW.order_date, 'DD-MON-YY');
END;
/




--INSERT ORDER
EXEC ADD_ORDERS('O100','6-Sep-2023','13-sep-2023','FEDX','CATALONIA','SPAIN','BARCELONA','80011','C100','AR100');
EXEC ADD_ORDERS('O101','11-Aug-2023','15-Aug-2023','FEDX','CATALONIA','SPAIN','BARCELONA','80011','C100','AR101');
EXEC ADD_ORDERS('O102','14-Jul-2023','18-Jul-2023','PL LOGISTICS','AL AJBAN','UK','LONDON','53330','C102','AR101');
EXEC ADD_ORDERS('O103','18-Sep-2023','22-Sep-2023','PL LOGISTICS','AL AJBAN','UK','LONDON','53330','C102','AR103');
EXEC ADD_ORDERS('O104','21-Oct-2023','26-Oct-2023','GENERAL LOGISTICS','BAOURE','FRANCE','PARIS','70123','C102','AR100');
EXEC ADD_ORDERS('O105','11-Apr-2023','11-Jul-2023','PL LOGISTICS','Savar Upazila','Lahore','Pakistan','81023','C103','AR101');
EXEC ADD_ORDERS('O106','5-Jul-2023','9-Jul-2023','FEDX','CENTRO','MADRID','SPAIN','32187','C100','AR100');
EXEC ADD_ORDERS('O107','6-Aug-2023','9-Aug-2023','UPS','HALTON','LIVERPOOL','UK','82721','C101','AR103');
EXEC ADD_ORDERS('O108','4-Aug-2023','6-Aug-2023','UPS','HALTON','LIVERPOOL','UK','82721','C101','AR101');
EXEC ADD_ORDERS('O109','2-Nov-2023','5-Nov-2023','GENERAL LOGISTICS','BAOURE','FRANCE','PARIS','70123','C102','AR101');


--Table View

Select * from Orders;



--Function for How many days the order get delivered
create or replace function Days_to_get_Shipped(pi_order_id varchar) return number
AS
v_total_days number;
begin
    select shipped_date-order_date into v_total_days
    from Orders
    where order_id = pi_order_id;
    return v_total_days;
exception
    when no_data_found then
    return -1;
    when others then
    return -99;
end;
/

select orders.*,Days_to_get_Shipped(order_id)||' Days' as No_Of_Days_that_order_get_delivered from Orders;





















/* **************************************                 VIEWS                 *************************************************/






--1 TOTAL ORDERS PER CUSTOMER

create or replace view Total_Orders_Per_Customer
as
select o.custid,c.fname,c.lname,count(o.order_id) total_orders from orders o
join customer_directory c on o.custid=c.custid
group by o.custid,c.fname,c.lname 
ORDER BY o.CUSTID;

SELECT * FROM TOTAL_ORDERS_PER_CUSTOMER; 





--2 ARTWORKS NOT IN EXHIBITION

create or replace view Artwork_Not_In_Exhibition
as
SELECT A.ARTID,A.TITLE,A.YEAR_,A.TYPE_OF_ART,A.PRICE 
FROM ARTWORK A LEFT JOIN EXHIBITION E
ON A.EID=E.EID WHERE E.EID IS NULL;

select * from Artwork_Not_In_Exhibition;



--3  ARTWORK NEVER SOLD

create or replace view Artwork_Never_Sold
as
SELECT A.ARTID, A.TITLE, A.TYPE_OF_ART, A.PRICE FROM ARTWORK A
LEFT JOIN ORDERS O ON A.ARTID = O.ARTID
WHERE O.ORDER_ID IS NULL;

select * from Artwork_Never_Sold;



--4 ARTIST NOT IN EXHIBITION

create or replace view Artist_Not_In_Exhibition
as
SELECT A.ARTIST_ID,ART.TITLE AS NAME_OF_ART,ART.TYPE_OF_ART,
ART.PRICE FROM ARTIST A LEFT JOIN ARTWORK ART ON 
A.ARTIST_ID = ART.ARTIST_ID WHERE ART.EID IS NULL;

select * from Artist_Not_In_Exhibition;





--5 HIGHEST VALUATION COUNTRY

create or replace view Highest_Valuation_Country
as
SELECT CDI.ADDRESS,SUM(A.PRICE) AS TOTAL_PRICE FROM ORDERS O JOIN ARTWORK A
ON O.ARTID=A.ARTID
JOIN CUSTOMER_DIRECTORY CDI ON CDI.CUSTID=O.CUSTID
GROUP BY CDI.ADDRESS
ORDER BY CDI.ADDRESS DESC;

select * from Highest_Valuation_Country;





--6 TOP 3 CUSTOMER'S WHO SPEND THE MOST

CREATE OR REPLACE VIEW TOP_3_CUSTOMER_SPENDING
as
SELECT O.CUSTID,CDI.FNAME,CDI.LNAME,CDI.ADDRESS, SUM(ART.PRICE) AS TOTAL
FROM ORDERS O 
JOIN ARTWORK ART ON ART.ARTID = O.ARTID
JOIN CUSTOMER_DIRECTORY CDI ON CDI.CUSTID = O.CUSTID
GROUP BY O.CUSTID,CDI.FNAME,CDI.LNAME,CDI.ADDRESS
ORDER BY TOTAL DESC
FETCH FIRST 3 ROWS ONLY
;

select * from TOP_3_CUSTOMER_SPENDING;


--7 HIGHEST SALE PER MONTH

CREATE OR REPLACE VIEW HIGHEST_SALE_PER_MONTH AS
SELECT
    TO_CHAR(TO_DATE(o.order_date, 'DD-MM-YYYY'), 'Month') AS MONTH,
    SUM(art.price) AS total_sale
FROM
    Orders o
JOIN
    artwork art ON o.artid = art.artid
GROUP BY
    TO_CHAR(TO_DATE(o.order_date, 'DD-MM-YYYY'), 'Month')
ORDER BY
    TO_DATE('01-' || TO_CHAR(TO_DATE(o.order_date, 'DD-MM-YYYY'), 'Month'), 'DD-MON');


select * from HIGHEST_SALE_PER_MONTH;

